<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		                http://www.springframework.org/schema/aop 
		                http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		                http://www.springframework.org/schema/tx 
		                http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd">


	<context:property-placeholder location="classpath:properties/jdbc.properties" />
	<!-- apache.dbcp连接池的配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="maxTotal" value="100"></property>
		<property name="maxIdle" value="30"></property>
		<property name="maxWaitMillis" value="500"></property>
		<property name="defaultAutoCommit" value="true"></property>
		<!-- 是否自我中断
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="60" /> -->
	</bean>

	<!-- mybatis文件配置，扫描所有mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:spring/mybatis-config.xml" />
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations" value="classpath:com/ymtk/ai/zhxs/mapper/*.xml"></property>
	</bean>
	<!-- configLocation为mybatis属性 mapperLocations为所有mapper -->

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>

	<!-- 注册单个 mybatisGenerator 自动生成的 接口文件 <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="com.bjlc.ai.mapper.user.UserMapper" 
		/> <property name="sqlSessionFactory" ref="sqlSessionFactory" /> </bean> -->
	<!-- 扫描mybatisGenerator 自动生成的 所有接口 -->
	<!-- 通过扫描的模式，扫描目录在com/hoo/mapper目录下，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ymtk.ai.zhxs.mapper" />
		<property name="markerInterface" value="com.ymtk.ai.zhxs.mapper.SqlMapper" />
	</bean>

	<!-- 数据库事务策略 -->
	<!-- <bean id="TransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource"> <ref bean="dataSource" /> </property> </bean> -->

	<!-- 配置事务的传播特性 <bean id="baseTransactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" 
		abstract="true"> <property name="transactionManager" ref="TransactionManager" 
		/> <property name="transactionAttributes"> <props> <prop key="add*">PROPAGATION_REQUIRED</prop> 
		<prop key="edit*">PROPAGATION_REQUIRED</prop> <prop key="remove*">PROPAGATION_REQUIRED</prop> 
		<prop key="insert*">PROPAGATION_REQUIRED</prop> <prop key="update*">PROPAGATION_REQUIRED</prop> 
		<prop key="del*">PROPAGATION_REQUIRED</prop> <prop key="*">readOnly</prop> 
		</props> </property> </bean> -->
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
			<tx:method name="edit*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="remove*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="del*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="pc"
			expression="execution(public * com.ymtk.ai.zhxs.service.*.*(..))" /> <!--把事务控制在Service层 -->
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>
</beans>